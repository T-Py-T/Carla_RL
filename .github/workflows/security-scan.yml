name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, master, dev]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  # Security scanning for dependencies and code
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        github-token: ${{ github.token }}
        
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Run security scan
      run: |
        echo "Running security scan..."
        # Install pip-audit if not available
        uv add pip-audit || echo "pip-audit already installed"
        
        # Check for known vulnerabilities in dependencies
        uv run pip-audit --desc --format=json --output=security-report.json || echo "pip-audit completed with warnings"
        
        # Intelligent secret scanning - look for actual secrets, not common programming terms
        echo "Scanning for potential secrets..."
        
        # Check for hardcoded API keys, tokens, passwords with specific patterns
        SECRETS_FOUND=0
        
        # Look for actual API keys (32+ character alphanumeric strings)
        if grep -r -E "['\"][a-zA-Z0-9]{32,}['\"]" . \
          --exclude-dir=.git \
          --exclude-dir=.venv \
          --exclude-dir=__pycache__ \
          --exclude="*.md" \
          --exclude="*.pyc" \
          --exclude="*.yml" \
          --exclude="*.yaml" \
          --exclude="*.json" \
          --exclude=".secrets" \
          --exclude="security-report.json" \
          | grep -v -E "(test|example|dummy|placeholder|sha256|md5|uuid|hash|checksum)"; then
          echo "⚠️  Potential hardcoded API keys found"
          SECRETS_FOUND=1
        fi
        
        # Look for actual passwords in connection strings or assignments
        if grep -r -E "(password|passwd|pwd)\s*[=:]\s*['\"][^'\"]{8,}['\"]" . \
          --exclude-dir=.git \
          --exclude-dir=.venv \
          --exclude-dir=__pycache__ \
          --exclude="*.md" \
          --exclude="*.pyc" \
          --exclude="*.yml" \
          --exclude="*.yaml" \
          --exclude="*.json" \
          --exclude=".secrets" \
          --exclude="security-report.json" \
          | grep -v -E "(test|example|dummy|placeholder|admin|redis|mysql|postgres)"; then
          echo "⚠️  Potential hardcoded passwords found"
          SECRETS_FOUND=1
        fi
        
        # Look for actual tokens (ghp_, ghs_, gho_ prefixes)
        if grep -r -E "(ghp_|ghs_|gho_)[a-zA-Z0-9]{36}" . \
          --exclude-dir=.git \
          --exclude-dir=.venv \
          --exclude-dir=__pycache__ \
          --exclude="*.md" \
          --exclude="*.pyc" \
          --exclude="*.yml" \
          --exclude="*.yaml" \
          --exclude="*.json" \
          --exclude=".secrets" \
          --exclude="security-report.json"; then
          echo "⚠️  Potential GitHub tokens found"
          SECRETS_FOUND=1
        fi
        
        # Look for AWS keys (AKIA prefix)
        if grep -r -E "AKIA[0-9A-Z]{16}" . \
          --exclude-dir=.git \
          --exclude-dir=.venv \
          --exclude-dir=__pycache__ \
          --exclude="*.md" \
          --exclude="*.pyc" \
          --exclude="*.yml" \
          --exclude="*.yaml" \
          --exclude="*.json" \
          --exclude=".secrets" \
          --exclude="security-report.json"; then
          echo "⚠️  Potential AWS access keys found"
          SECRETS_FOUND=1
        fi
        
        if [ $SECRETS_FOUND -eq 1 ]; then
          echo "❌ Security scan failed - potential secrets detected"
          exit 1
        else
          echo "✅ No obvious secrets found"
        fi
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report.json
