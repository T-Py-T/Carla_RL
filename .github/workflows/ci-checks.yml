name: CI Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, master, dev]

jobs:
  # Step 1: Basic sanity checks - build, style, format
  basic-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install basic dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort
        
    - name: Check Python syntax
      run: |
        echo "🔍 Checking Python syntax..."
        python -m py_compile model-serving/src/*.py 2>/dev/null || echo "No Python files in model-serving/src"
        python -m py_compile model-sim/src/*.py 2>/dev/null || echo "No Python files in model-sim/src"
        find . -name "*.py" -exec python -m py_compile {} \; || echo "Syntax check completed"
        
    - name: Check code formatting with black
      run: |
        echo "🎨 Checking code formatting..."
        black --check --diff . || (echo "❌ Code formatting issues found. Run 'black .' to fix." && exit 1)
        
    - name: Check import sorting with isort
      run: |
        echo "📦 Checking import sorting..."
        isort --check-only --diff . || (echo "❌ Import sorting issues found. Run 'isort .' to fix." && exit 1)
        
    - name: Basic linting with ruff
      run: |
        echo "🔧 Running basic linting..."
        ruff check . --select=E,W,F || (echo "❌ Linting issues found. Run 'ruff check --fix .' to fix." && exit 1)
        
    - name: Check for basic security issues
      run: |
        echo "🔒 Checking for basic security issues..."
        # Check for hardcoded secrets
        if grep -r -i "password\|secret\|key\|token" . --exclude-dir=.git --exclude-dir=.venv --exclude="*.md" | grep -v "example\|test\|dummy"; then
          echo "❌ Potential secrets found in code"
          exit 1
        fi
        echo "✅ No obvious secrets found"
        
    - name: Validate configuration files
      run: |
        echo "⚙️ Validating configuration files..."
        # Check YAML files
        find . -name "*.yml" -o -name "*.yaml" | xargs -I {} python -c "import yaml; yaml.safe_load(open('{}'))" || echo "YAML validation failed"
        # Check JSON files
        find . -name "*.json" | xargs -I {} python -c "import json; json.load(open('{}'))" || echo "JSON validation failed"
        echo "✅ Configuration files are valid"

  # Step 2: Build and test (only if basic checks pass)
  build-and-test:
    runs-on: ubuntu-latest
    needs: basic-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install model-serving dependencies
        if [ -f "model-serving/requirements.txt" ]; then
          pip install -r model-serving/requirements.txt
        fi
        # Install model-sim dependencies  
        if [ -f "model-sim/pyproject.toml" ]; then
          pip install -e model-sim/
        fi
        # Install test dependencies
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        echo "🧪 Running tests..."
        # Run model-serving tests
        if [ -d "model-serving/tests" ]; then
          pytest model-serving/tests/ -v --tb=short
        else
          echo "No model-serving tests found"
        fi
        # Run model-sim tests
        if [ -d "model-sim/tests" ]; then
          pytest model-sim/tests/ -v --tb=short
        else
          echo "No model-sim tests found"
        fi
        
    - name: Test Docker build
      run: |
        echo "🐳 Testing Docker build..."
        if [ -f "model-serving/Dockerfile" ]; then
          docker build -t model-serving:test ./model-serving/
          echo "✅ Docker build successful"
        else
          echo "No Dockerfile found"
        fi

  # Step 3: Summary (only if all checks pass)
  summary:
    runs-on: ubuntu-latest
    needs: [basic-checks, build-and-test]
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "## CI Checks Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Basic Checks (Syntax, Format, Lint) | ${{ needs.basic-checks.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.basic-checks.result }}" = "success" ] && [ "${{ needs.build-and-test.result }}" = "success" ]; then
          echo "✅ **All checks passed!** Ready to merge." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some checks failed.** Please fix the issues before merging." >> $GITHUB_STEP_SUMMARY
        fi
