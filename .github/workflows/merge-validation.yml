name: Merge Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master, dev, staging, production]

jobs:
  # Comprehensive validation for PR merges
  # NOTE: This should be configured as a required status check in branch protection rules
  merge-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better context
        
    - name: Show PR information
      run: |
        echo "PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}"
        echo "From: ${{ github.event.pull_request.head.ref }}"
        echo "To: ${{ github.event.pull_request.base.ref }}"
        echo "Author: ${{ github.event.pull_request.user.login }}"
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |

        # Install root dependencies
        uv sync --dev
        # Install model-serving dependencies
        if [ -d "model-serving" ]; then
          cd model-serving && uv sync --dev && cd ..
        fi
        # Install model-sim dependencies  
        if [ -d "model-sim" ]; then
          cd model-sim && uv sync --dev && cd ..
        fi

        
    - name: Check Python syntax
      run: |
        echo "Checking Python syntax..."
        # Use find with -exec for better performance and no while loop
        find . -name "*.py" \
          -not -path "./.venv/*" \
          -not -path "./*/__pycache__/*" \
          -not -path "./*/node_modules/*" \
          -not -path "./.git/*" \
          -not -path "./*/build/*" \
          -not -path "./*/dist/*" \
          -exec python3 -m py_compile {} \; || (echo "Python syntax check failed" && exit 1)
        echo "Python syntax check passed"
        
    - name: Run full tests
      run: |
        echo "Running full test suite..."
        # Run model-serving tests
        if [ -d "model-serving/tests" ]; then

          echo "Running model-serving tests..."
          cd model-serving && uv run pytest tests/ -v --tb=short && cd ..
        fi
        # Run model-sim tests
        if [ -d "model-sim/tests" ]; then
          echo "Running model-sim tests..."
          cd model-sim && uv run pytest tests/ -v --tb=short && cd ..

        fi
        echo "All tests passed"
        
    - name: Test Docker builds
      run: |
        echo "Testing Docker builds..."
        if [ -f "model-serving/Dockerfile" ]; then
          docker build -t model-serving:test ./model-serving/
          echo "Model-serving Docker build successful"
        fi
        if [ -f "model-sim/Dockerfile" ]; then
          docker build -t model-sim:test ./model-sim/
          echo "Model-sim Docker build successful"
        fi
        
    - name: Validate configurations
      run: |
        echo "Validating configuration files..."
        # Check JSON files
        find . -name "*.json" \
          | grep -v "\.venv/" \
          | grep -v "__pycache__" \
          | grep -v "node_modules" \
          | while read file; do
          python3 -c "import json; json.load(open('$file'))" || (echo "Invalid JSON: $file" && exit 1)
        done
        echo "Configuration files are valid"
