[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "carla-rl-serving"
version = "0.1.0"
description = "High-performance serving infrastructure for CarlaRL policies"
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE"}
authors = [
    {name = "CarlaRL Team", email = "team@carlarl.ai"},
]
keywords = [
    "reinforcement-learning",
    "autonomous-vehicles", 
    "carla",
    "model-serving",
    "fastapi",
    "pytorch"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi>=0.104.1,<0.105.0",
    "uvicorn[standard]>=0.24.0,<0.25.0",
    "pydantic>=2.5.0,<3.0.0",
    "torch>=2.1.0,<3.0.0",
    "numpy>=1.24.0,<2.0.0",
    "pyyaml>=6.0.0,<7.0.0",
    "python-multipart>=0.0.6,<0.1.0",
    "psutil>=5.9.8",
    "ruff>=0.1.15",
    "mypy>=1.18.2",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "requests>=2.32.5",
    "watchdog>=6.0.0",
    "deepdiff>=8.6.1",
    "jinja2>=3.1.6",
    "prometheus-client>=0.17.0,<0.18.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<0.22.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "httpx>=0.25.0,<0.26.0",
    "black>=23.9.0,<24.0.0",
    "ruff>=0.1.0,<0.2.0",
    "mypy>=1.6.0,<2.0.0",
    "pre-commit>=3.5.0,<4.0.0",
]

gpu = [
    "torch>=2.1.0,<3.0.0",
    "tensorrt>=8.0.0,<9.0.0",
]

optimization = [
    "numpy>=1.24.0,<2.0.0",
    "psutil>=5.9.0,<6.0.0",
    "py-cpuinfo>=9.0.0,<10.0.0",
]

monitoring = [
    "prometheus-client>=0.17.0,<0.18.0",
    "psutil>=5.9.0,<6.0.0",
]

all = [
    "carla-rl-serving[dev,gpu,optimization,monitoring]"
]

[project.urls]
Homepage = "https://github.com/your-org/carla-rl"
Repository = "https://github.com/your-org/carla-rl.git"
Documentation = "https://carla-rl.readthedocs.io"
"Bug Tracker" = "https://github.com/your-org/carla-rl/issues"

[project.scripts]
carla-rl-serve = "carla_rl_serving.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.version]
path = "src/version.py"
pattern = "MODEL_VERSION = \"(?P<version>[^\"]+)\""

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff linting
[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E9",      # pycodestyle errors (syntax errors, indentation)
    "F",       # pyflakes (undefined names, unused imports)
]
ignore = [
    "E501",    # line too long
    "E203",    # whitespace before ':'
    "B008",    # do not perform function calls in argument defaults
    "B006",    # do not use mutable data structures for argument defaults
    "B904",    # raise exceptions with raise ... from err
    "N803",    # argument name should be lowercase
    "N815",    # variable in class scope should not be mixedCase
    "N818",    # exception name should be named with an Error suffix
    "E402",    # module level import not at top of file
    "E722",    # do not use bare except
    "W291",    # trailing whitespace
    "W293",    # blank line contains whitespace
    "B007",    # loop control variable not used within loop body
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["N802", "N803", "N806"]

[tool.ruff.lint.isort]
known-first-party = ["src"]

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "numpy.*",
    "yaml.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "asyncio: marks tests as asyncio tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
